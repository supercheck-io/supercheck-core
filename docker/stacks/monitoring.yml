version: "3.8"

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./configs/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - ./configs/prometheus/targets:/etc/prometheus/targets
    networks:
      - supercheck-monitoring
      - supercheck-backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.monitoring == true
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_AUTH_ANONYMOUS_ENABLED: false
      GF_SERVER_DOMAIN: ${GRAFANA_DOMAIN:-localhost}
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3001}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - supercheck-monitoring
      - supercheck-frontend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.monitoring == true
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    hostname: alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://alertmanager:9093"
      - "--web.route-prefix=/"
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./configs/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./configs/alertmanager/templates:/etc/alertmanager/templates
    networks:
      - supercheck-monitoring
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.monitoring == true
      resources:
        limits:
          memory: 512M
          cpus: "0.25"
        reservations:
          memory: 256M
          cpus: "0.1"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9093/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - prometheus
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    hostname: node-exporter
    command:
      - "--path.rootfs=/host"
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
      - "--collector.netdev.device-exclude=^(veth.*|docker.*|br-.*|lo)$$"
    ports:
      - "9100:9100"
    volumes:
      - /:/host:ro,rslave
    networks:
      - supercheck-monitoring
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
          cpus: "0.1"
        reservations:
          memory: 64M
          cpus: "0.05"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9100/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Cadvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    hostname: cadvisor
    command:
      - "--port=8080"
      - "--docker_only=true"
      - "--storage_duration=2m"
      - "--housekeeping_interval=30s"
      - "--disable_metrics=accelerator,cpu_topology,disk,diskIO,memory,numa,perf_event,process,referenced_memory,tcp,udp"
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - supercheck-monitoring
    deploy:
      mode: global
      resources:
        limits:
          memory: 256M
          cpus: "0.2"
        reservations:
          memory: 128M
          cpus: "0.1"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis Exporter - Redis Metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    hostname: redis-exporter
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_EXPORTER_LOG_FORMAT: txt
    ports:
      - "9121:9121"
    networks:
      - supercheck-monitoring
      - supercheck-backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.cache == true
      resources:
        limits:
          memory: 128M
          cpus: "0.1"
        reservations:
          memory: 64M
          cpus: "0.05"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9121/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - redis
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Postgres Exporter - PostgreSQL Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    hostname: postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER:-supercheck}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-supercheck}?sslmode=disable
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter/queries.yaml
      PG_EXPORTER_CONSTANT_LABELS: cluster=supercheck
    ports:
      - "9187:9187"
    volumes:
      - ./configs/postgres-exporter/queries.yaml:/etc/postgres_exporter/queries.yaml
    networks:
      - supercheck-monitoring
      - supercheck-backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.database == true
      resources:
        limits:
          memory: 128M
          cpus: "0.1"
        reservations:
          memory: 64M
          cpus: "0.05"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9187/metrics",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - postgres
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    hostname: loki
    command:
      - "-config.file=/etc/loki/local-config.yaml"
      - "-print-config-stderr=true"
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./configs/loki/local-config.yaml:/etc/loki/local-config.yaml
    networks:
      - supercheck-monitoring
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
          - node.labels.monitoring == true
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3100/ready",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:latest
    hostname: promtail
    command:
      - "-config.file=/etc/promtail/config.yml"
      - "-config.expand-env=true"
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./configs/promtail/config.yml:/etc/promtail/config.yml
    networks:
      - supercheck-monitoring
    deploy:
      mode: global
      resources:
        limits:
          memory: 256M
          cpus: "0.2"
        reservations:
          memory: 128M
          cpus: "0.1"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9080/ready",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - loki
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

# Networks
networks:
  supercheck-monitoring:
    driver: overlay
    attachable: true
    ipam:
      driver: default
      config:
        - subnet: 10.22.0.0/24
    labels:
      - "traefik.enable=false"

# Volumes
volumes:
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docker/data/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docker/data/grafana

  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docker/data/alertmanager

  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/docker/data/loki

# Configs
configs:
  prometheus_config:
    file: ./configs/prometheus/prometheus.yml

  alertmanager_config:
    file: ./configs/alertmanager/alertmanager.yml

  loki_config:
    file: ./configs/loki/local-config.yaml

  promtail_config:
    file: ./configs/promtail/config.yml
