# Hetzner Cloud Environment Configuration
# For Docker Swarm Multi-Location Deployment
#
# Copy to .env.hetzner and update with your values
# NEVER commit this file to version control!
#
# Usage:
#   cp .env.hetzner.example .env.hetzner
#   nano .env.hetzner
#   docker stack deploy -c docker-stack-swarm-hetzner.yml supercheck

# ============================================
# DEPLOYMENT SETTINGS
# ============================================

# Number of replicas per service
APP_REPLICAS=3
WORKER_REPLICAS_FSN1=2
WORKER_REPLICAS_ASH=2
WORKER_REPLICAS_SG=2

# Worker capacity per location
WORKER_CAPACITY_FSN1=5
WORKER_CAPACITY_ASH=5
WORKER_CAPACITY_SG=5

# ============================================
# MULTI-LOCATION CONFIGURATION
# ============================================

# Enable distributed multi-location execution (one queue job per region)
# Set to false to fall back to single-worker simulation in development
MULTI_LOCATION_DISTRIBUTED=true

# Worker regions are mapped through service-level WORKER_LOCATION values
# (see docker-stack-swarm-hetzner.yml). No additional global variables needed.

# ============================================
# POSTGRESQL DATABASE
# Recommended: Hetzner managed database or external RDS
# ============================================

# Full PostgreSQL connection URL
# Example: postgresql://supercheck:password@db.hetzner.cloud:5432/supercheck_db
DATABASE_URL=postgresql://supercheck:change_this_password@db.hetzner.cloud:5432/supercheck_db

# Individual connection parameters (if needed)
DB_HOST=db.hetzner.cloud
DB_PORT=5432
DB_USER=supercheck
DB_PASSWORD=change_this_password
DB_NAME=supercheck_db

# ============================================
# REDIS CACHE & JOB QUEUE
# Recommended: Self-hosted on Hetzner or managed Redis
# ============================================

# Full Redis connection URL
# Example: redis://:password@redis.internal:6379/0
REDIS_URL=redis://:change_this_password@redis.internal:6379/0

# Individual Redis parameters
REDIS_HOST=redis.internal
REDIS_PORT=6379
REDIS_PASSWORD=change_this_password
REDIS_DB=0

# ============================================
# S3 STORAGE (Hetzner Storage Box or OVH S3)
# ============================================

# S3 Endpoint (Hetzner Storage Box or OVH S3 Cloud)
# Examples:
#   Hetzner Storage Box: https://s3.your_storagebox.io
#   OVH S3: https://s3.de.io.cloud.ovh.net
#   Backblaze B2: https://s3.us-west-000.backblazeb2.com
S3_ENDPOINT=https://s3.your_storagebox.io

# S3 Region
AWS_REGION=us-east-1

# S3 Credentials (from Hetzner Storage Box settings)
AWS_ACCESS_KEY_ID=your_s3_access_key
AWS_SECRET_ACCESS_KEY=your_s3_secret_key

# S3 Bucket Names (create these in advance)
S3_JOB_BUCKET_NAME=supercheck-job-artifacts
S3_TEST_BUCKET_NAME=supercheck-test-artifacts
S3_MONITOR_BUCKET_NAME=supercheck-monitor-artifacts
S3_STATUS_BUCKET_NAME=supercheck-status-artifacts

# S3 Configuration Options
S3_FORCE_PATH_STYLE=true
S3_OPERATION_TIMEOUT=30000
S3_MAX_RETRIES=3

# ============================================
# APPLICATION URLS & DOMAINS
# ============================================

# Main application URL
NEXT_PUBLIC_APP_URL=https://supercheck.example.com
APP_URL=https://supercheck.example.com

# Status page domain (for public status pages)
STATUS_PAGE_DOMAIN=status.example.com

# Better Auth configuration
BETTER_AUTH_URL=https://supercheck.example.com

# ============================================
# SECURITY & SECRETS
# Generate with: openssl rand -hex 16
# ============================================

# Authentication secret (32 char hex)
# Generate: openssl rand -hex 16
BETTER_AUTH_SECRET=change_me_32_char_hex_secret_here

# Encryption key for credentials (32 char hex)
# Generate: openssl rand -hex 16
SECRET_ENCRYPTION_KEY=change_me_32_char_hex_key_here

# ============================================
# EMAIL/SMTP CONFIGURATION
# For alert notifications
# ============================================

# SMTP Server
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=notifications@example.com
SMTP_PASSWORD=your_smtp_password
SMTP_SECURE=false
SMTP_FROM_EMAIL=supercheck-alerts@example.com

# ============================================
# MULTI-LOCATION CONFIGURATION
# ============================================



# ============================================
# CAPACITY MANAGEMENT
# ============================================

# Maximum concurrent job executions per worker
RUNNING_CAPACITY=10

# Maximum queued jobs before backpressure
QUEUED_CAPACITY=50

# Maximum parallel test executions per worker
MAX_CONCURRENT_EXECUTIONS=2

# Test execution timeout (milliseconds)
TEST_EXECUTION_TIMEOUT_MS=120000

# Job execution timeout (milliseconds)
JOB_EXECUTION_TIMEOUT_MS=900000

# ============================================
# PLAYWRIGHT CONFIGURATION
# ============================================

PLAYWRIGHT_HEADLESS=true
PLAYWRIGHT_RETRIES=1
PLAYWRIGHT_TRACE=retain-on-failure
PLAYWRIGHT_SCREENSHOT=on
PLAYWRIGHT_VIDEO=retain-on-failure
ENABLE_FIREFOX=false
ENABLE_WEBKIT=false
ENABLE_MOBILE=false

# ============================================
# DATA RETENTION & CLEANUP
# ============================================

# Monitor results cleanup
MONITOR_CLEANUP_ENABLED=true
MONITOR_CLEANUP_CRON=0 2 * * *
MONITOR_RETENTION_DAYS=30
MONITOR_CLEANUP_BATCH_SIZE=1000
MONITOR_PRESERVE_STATUS_CHANGES=true

# Job runs cleanup
JOB_RUNS_CLEANUP_ENABLED=true
JOB_RUNS_CLEANUP_CRON=0 3 * * *
JOB_RUNS_RETENTION_DAYS=90

# ============================================
# SECURITY SETTINGS
# ============================================

# Allow internal target URLs
ALLOW_INTERNAL_TARGETS=false

# Enable SSRF protection
SSRF_PROTECTION_ENABLED=true

# ============================================
# OBSERVABILITY
# ============================================

# Log level: debug, info, warn, error
LOG_LEVEL=info

# Demo mode (for testing)
NEXT_PUBLIC_DEMO_MODE=false

# ============================================
# NODE ENVIRONMENT
# ============================================

NODE_ENV=production

# ============================================
# HETZNER SPECIFIC NOTES
# ============================================
#
# 1. DATABASE SETUP:
#    Option A: Use Hetzner Managed Database (recommended)
#              - Create via Hetzner Cloud console
#              - Get connection string
#
#    Option B: Self-hosted PostgreSQL on Hetzner server
#              - Create dedicated server (cx41 or larger)
#              - Install PostgreSQL 14+
#              - Enable remote connections
#
# 2. REDIS SETUP:
#    Option A: Self-hosted on dedicated server
#              - Create Hetzner server
#              - Install Redis
#              - Enable AOF persistence
#              - Setup replication (optional)
#
#    Option B: External managed Redis service
#              - Upstash Redis (free tier available)
#              - Redis Cloud
#              - AWS ElastiCache (if using hybrid setup)
#
# 3. STORAGE BOX SETUP:
#    - Order Hetzner Storage Box (€3-200/month)
#    - Enable S3 compatibility in settings
#    - Create S3 credentials
#    - Endpoint: https://s3.your_storagebox.io
#
# 4. HETZNER CLOUD LOCATIONS:
#    FSN1: Falkenstein, Germany (primary - use for app)
#    ASH:  Ashburn, Virginia, USA (us-east)
#    FSN1: Falkenstein, Germany (eu-central)
#    SG:   Singapore (asia-pacific)
#
# 5. COST OPTIMIZATION:
#    - Use cx41 for app servers (4 CPU, 8GB RAM) = €0.026/hour
#    - Use cx51 for worker servers (8 CPU, 16GB RAM) = €0.104/hour
#    - Total: 3 × cx41 + 10 × cx51 = ~€0.17/hour = €1,200/month
#    - Storage Box: €50-200/month depending on size
#    - Much cheaper than AWS!
#
# 6. SECURITY:
#    - Use Hetzner Firewall to restrict access
#    - Only expose ports 80/443 via load balancer
#    - Keep database on private network (Hetzner networks)
#    - Use VPC/private networks for all communication
#
# 7. MONITORING:
#    - Enable Hetzner Cloud Monitoring
#    - Setup alerts for high CPU/Memory
#    - Monitor S3 bucket usage
#    - Watch database connection count
#
# ============================================
