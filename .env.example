# Environment variables for Supercheck on Dokploy with External Services
# Copy this file to .env.dokploy in your repository root
# Update all values marked as CHANGE_THIS

# =============================================================================
# SECURITY CONFIGURATION - REQUIRED FOR PRODUCTION
# =============================================================================

# Better Auth Secret - REQUIRED for production
BETTER_AUTH_SECRET=CHANGE_THIS_GENERATE_32_CHAR_HEX

# Encryption Keys - REQUIRED for production
# Generate with: openssl rand -hex 32
VARIABLES_ENCRYPTION_KEY=CHANGE_THIS_GENERATE_64_CHAR_HEX_KEY_FOR_VARIABLE_SECRETS
CREDENTIAL_ENCRYPTION_KEY=CHANGE_THIS_GENERATE_64_CHAR_HEX_KEY_FOR_CREDENTIAL_SECRETS

# =============================================================================
# EXTERNAL DATABASE CONFIGURATION - REQUIRED
# =============================================================================

# External PostgreSQL Database Configuration
# Examples:
# - Neon: postgresql://username:password@ep-example.us-east-1.aws.neon.tech/supercheck?sslmode=require
# - Supabase: postgresql://postgres.xxx:[PASSWORD]@aws-0-region.pooler.supabase.com:6543/postgres
# - PlanetScale: mysql://username:password@host:port/database

DATABASE_URL=CHANGE_THIS_YOUR_DATABASE_CONNECTION_STRING

# Individual Database Components (required by docker-compose-external.yml)
DB_HOST=CHANGE_THIS_YOUR_DB_HOST
DB_PORT=5432
DB_USER=CHANGE_THIS_YOUR_DB_USER
DB_PASSWORD=CHANGE_THIS_YOUR_DB_PASSWORD
DB_NAME=supercheck

# Connection Pool Settings (postgres-js)
DB_POOL_MAX=10                 # Maximum number of connections (default: 10)
DB_IDLE_TIMEOUT=30             # Seconds before idle connections are closed (default: 30)
DB_CONNECT_TIMEOUT=10          # Seconds to wait for connection (default: 10)
DB_MAX_LIFETIME=1800           # Seconds before connections are recycled (default: 1800 = 30 min)

# =============================================================================
# EXTERNAL REDIS CONFIGURATION - REQUIRED
# =============================================================================

# External Redis Configuration
# Examples:
# - Redis Cloud: redis://default:password@redis-12345.c1.us-east-1-1.ec2.cloud.redislabs.com:12345
# - Upstash: rediss://:password@us1-xxx.upstash.io:12345

REDIS_URL=CHANGE_THIS_YOUR_REDIS_CONNECTION_STRING

# Individual Redis Components (required by docker-compose-external.yml)
REDIS_HOST=CHANGE_THIS_YOUR_REDIS_HOST
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_THIS_YOUR_REDIS_PASSWORD

# =============================================================================
# EXTERNAL S3 CONFIGURATION - REQUIRED
# =============================================================================

# AWS S3 Configuration
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=CHANGE_THIS_YOUR_AWS_ACCESS_KEY
AWS_SECRET_ACCESS_KEY=CHANGE_THIS_YOUR_AWS_SECRET_KEY

# S3 Endpoint (use full URL for non-AWS providers)
# AWS S3: https://s3.amazonaws.com or leave empty
# Cloudflare R2: https://account-id.r2.cloudflarestorage.com
# DigitalOcean: https://nyc3.digitaloceanspaces.com
S3_ENDPOINT=https://s3.amazonaws.com

# S3 Bucket Names (create these in your S3 console)
S3_JOB_BUCKET_NAME=supercheck-job-artifacts
S3_TEST_BUCKET_NAME=supercheck-test-artifacts

# S3 Configuration
S3_FORCE_PATH_STYLE=false  # Set to true for non-AWS providers
S3_OPERATION_TIMEOUT=10000
S3_MAX_RETRIES=3

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# App URLs (Dokploy will automatically set these)
NEXT_PUBLIC_APP_URL=https://your-app-domain.dokploy.app
BETTER_AUTH_URL=https://your-app-domain.dokploy.app

# Environment and Logging
NODE_ENV=production

# Demo Mode Configuration
NEXT_PUBLIC_DEMO_MODE=false

# Capacity and Timeout Configuration
RUNNING_CAPACITY=3
QUEUED_CAPACITY=25
MAX_CONCURRENT_EXECUTIONS=2  # Max parallel tests per worker (default: 1)
# Note: Parallelism is achieved through worker replicas (4 replicas in docker-compose.yml)
# Increase this only if you have sufficient CPU/memory resources per worker
TEST_EXECUTION_TIMEOUT_MS=120000
JOB_EXECUTION_TIMEOUT_MS=900000

# Notification Channel Limits
NEXT_PUBLIC_MAX_JOB_NOTIFICATION_CHANNELS=10
NEXT_PUBLIC_MAX_MONITOR_NOTIFICATION_CHANNELS=10

# =============================================================================
# PLAYWRIGHT CONFIGURATION
# =============================================================================

# Playwright Artifact Configuration
PLAYWRIGHT_HEADLESS=true
PLAYWRIGHT_RETRIES=1
PLAYWRIGHT_TRACE=retain-on-failure
PLAYWRIGHT_SCREENSHOT=only-on-failure
# Video recording on test failures for debugging (no resource limits imposed)
PLAYWRIGHT_VIDEO=retain-on-failure

# Browser Support (disabled by default for performance)
ENABLE_FIREFOX=false
ENABLE_WEBKIT=false
ENABLE_MOBILE=false

# =============================================================================
# DATA LIFECYCLE MANAGEMENT (CLEANUP) CONFIGURATION
# =============================================================================

# Monitor Results Cleanup
MONITOR_CLEANUP_ENABLED=true
MONITOR_CLEANUP_CRON="0 2 * * *"
MONITOR_RETENTION_DAYS=30
MONITOR_CLEANUP_BATCH_SIZE=1000
MONITOR_PRESERVE_STATUS_CHANGES=true
MONITOR_CLEANUP_SAFETY_LIMIT=1000000

# Job Runs Cleanup
JOB_RUNS_CLEANUP_ENABLED=false
JOB_RUNS_CLEANUP_CRON="0 3 * * *"
JOB_RUNS_RETENTION_DAYS=90
JOB_RUNS_CLEANUP_BATCH_SIZE=100
JOB_RUNS_CLEANUP_SAFETY_LIMIT=10000

# Playground Artifacts Cleanup
PLAYGROUND_CLEANUP_ENABLED=true
PLAYGROUND_CLEANUP_CRON="0 */12 * * *"
PLAYGROUND_CLEANUP_MAX_AGE_HOURS=24

# =============================================================================
# EMAIL CONFIGURATION FOR NOTIFICATIONS - REQUIRED
# =============================================================================

# SMTP Configuration - Can use any SMTP provider
# Examples:
# - Resend: smtp.resend.com (user: resend)
# - Gmail: smtp.gmail.com (use App Password with 2FA)
# - SendGrid: smtp.sendgrid.net (user: apikey)

SMTP_HOST=smtp.resend.com
SMTP_PORT=587
SMTP_USER=resend
SMTP_PASSWORD=CHANGE_THIS_YOUR_SMTP_PASSWORD
SMTP_SECURE=false
SMTP_FROM_EMAIL=notifications@your-domain.com

# =============================================================================
# AI FIX FEATURE CONFIGURATION (OPTIONAL)
# =============================================================================

# AI Provider Configuration
AI_PROVIDER=openai

# AI Model Configuration
AI_MODEL=gpt-4o-mini

# API Keys (required if AI fix is enabled)
OPENAI_API_KEY=CHANGE_THIS_YOUR_OPENAI_API_KEY

# AI Service Configuration (Advanced)
AI_TIMEOUT_MS=90000
AI_MAX_RETRIES=2
AI_TEMPERATURE=0.1

# =============================================================================
# ADMIN CONFIGURATION - REQUIRED
# =============================================================================

# Organization Configuration
MAX_PROJECTS_PER_ORG=10
DEFAULT_PROJECT_NAME="Default Project"

# =============================================================================
# WORKER SPECIFIC CONFIGURATION
# =============================================================================

# Worker-specific settings (for worker deployment)
# NOTE: Resource limits have been REMOVED - Docker manages resources naturally
# NODE_OPTIONS and UV_THREADPOOL_SIZE are no longer set to allow dynamic scaling
# If you need to set limits, uncomment and adjust these values:
# NODE_OPTIONS="--max-old-space-size=4096"  # Set only if you need to limit heap
# UV_THREADPOOL_SIZE=16  # Set only if you need to limit thread pool

# =============================================================================
# EXTERNAL SERVICES SETUP CHECKLIST
# =============================================================================

# PostgreSQL Setup:
# ✅ Create database named 'supercheck'
# ✅ Ensure user has full permissions (CREATE, ALTER, DROP, SELECT, INSERT, UPDATE, DELETE)
# ✅ Enable SSL/TLS for production
# ✅ Configure connection pooling if available
# ✅ Set appropriate resource limits (connections, memory)

# Redis Setup:
# ✅ Enable password authentication (REQUIRED)
# ✅ Configure maxmemory policy (recommended: allkeys-lru)
# ✅ Set maxmemory limit (recommended: 512MB minimum)
# ✅ Disable persistence for better performance
# ✅ Enable SSL/TLS for production if available

# S3 Setup:
# ✅ Create two buckets: supercheck-job-artifacts and supercheck-test-artifacts
# ✅ Configure IAM user/policy with s3:PutObject, s3:GetObject, s3:DeleteObject permissions
# ✅ Enable bucket versioning (recommended)
# ✅ Set appropriate lifecycle policies for old artifacts
# ✅ Configure CORS if accessing artifacts from browser

# Security Best Practices:
# ✅ Use strong, unique passwords for all services
# ✅ Enable SSL/TLS for all database and cache connections
# ✅ Use IAM roles instead of access keys where possible
# ✅ Regularly rotate secrets and credentials
# ✅ Configure firewall rules to restrict access to trusted IPs
# ✅ Enable audit logging for all services
# ✅ Set up monitoring and alerts for service health