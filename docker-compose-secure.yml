# YAML anchors for shared configuration
x-common-env: &common-env # Database Configuration
  DATABASE_URL: postgresql://postgres:postgres@postgres:5432/supercheck

  # Redis Configuration
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_PASSWORD: supersecure-redis-password-change-this
  REDIS_URL: redis://:supersecure-redis-password-change-this@redis:6379

  # App Configuration
  NEXT_PUBLIC_APP_URL: https://demo.supercheck.io
  BETTER_AUTH_URL: https://demo.supercheck.io
  BETTER_AUTH_SECRET: your-super-secret-key-change-this-in-production
  NODE_ENV: production
  RUNNING_CAPACITY: 6 # Optimized for 4-core server: 4 workers Ã— 1.5 jobs per worker
  QUEUED_CAPACITY: 50
  TEST_EXECUTION_TIMEOUT_MS: 120000
  JOB_EXECUTION_TIMEOUT_MS: 900000

  # AWS S3 / MinIO Configuration
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: minioadmin
  AWS_SECRET_ACCESS_KEY: minioadmin
  S3_ENDPOINT: http://minio:9000
  S3_JOB_BUCKET_NAME: playwright-job-artifacts
  S3_TEST_BUCKET_NAME: playwright-test-artifacts
  S3_FORCE_PATH_STYLE: true
  S3_OPERATION_TIMEOUT: 10000
  S3_MAX_RETRIES: 3

  # Notification Channel Limits
  NEXT_PUBLIC_MAX_JOB_NOTIFICATION_CHANNELS: 10
  NEXT_PUBLIC_MAX_MONITOR_NOTIFICATION_CHANNELS: 10

  # Monitor Configuration
  NEXT_PUBLIC_RECENT_MONITOR_RESULTS_LIMIT: 10000

  # Playwright Configuration - Optimized for Supercheck execution service
  PLAYWRIGHT_HEADLESS: true
  PLAYWRIGHT_RETRIES: 1
  PLAYWRIGHT_TRACE: on
  PLAYWRIGHT_SCREENSHOT: on
  PLAYWRIGHT_VIDEO: on

  # Browser support (disabled by default for performance)
  ENABLE_FIREFOX: false
  ENABLE_WEBKIT: false
  ENABLE_MOBILE: false

  # Playground Cleanup Configuration
  PLAYGROUND_CLEANUP_ENABLED: true
  PLAYGROUND_CLEANUP_CRON: "0 */12 * * *" # Every 12 hours
  PLAYGROUND_CLEANUP_MAX_AGE_HOURS: 24

  # Security Configuration
  CREDENTIAL_ENCRYPTION_KEY: your-credential-encryption-key-change-this-in-production

  # Better Auth Admin Configuration
  SUPER_ADMIN_EMAILS: super.admin@example.com
  MAX_PROJECTS_PER_ORG: 10
  DEFAULT_PROJECT_NAME: "Default Project"

  # SMTP Email Configuration for Notifications
  # Supports any SMTP provider including Resend SMTP, Gmail, SendGrid, etc.
  SMTP_HOST: smtp.resend.com
  SMTP_PORT: 587
  SMTP_USER: resend
  SMTP_PASSWORD: your-smtp-password-change-this-in-production
  SMTP_SECURE: false
  SMTP_FROM_EMAIL: notification@supercheck.io

  # Variable Encryption Configuration
  VARIABLES_ENCRYPTION_KEY: your-64-character-encryption-key-for-variable-secrets-change-this-in-prod

  # AI Fix Feature Configuration (Optional)
  # Uncomment and configure if using AI Fix feature
  # NEXT_PUBLIC_AI_FIX_ENABLED: true
  # AI_MODEL: gpt-4o-mini
  # OPENAI_API_KEY: ${OPENAI_API_KEY}  # Pass via environment variable, never hardcode
  # AI_TIMEOUT_MS: 90000
  # AI_MAX_RETRIES: 2
  # AI_TEMPERATURE: 0.1

services:
  # Traefik Reverse Proxy with HTTPS
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=hello@supercheck.io"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=false"
    networks:
      - supercheck-network
    restart: unless-stopped

  # App (Next.js Frontend) - Handles migrations internally
  app:
    image: ghcr.io/supercheck-io/supercheck/app:1.0.4-beta
    expose:
      - "3000"
    environment:
      <<: *common-env
      # App-specific configuration (inherits all common env vars)
    volumes:
      - ./app/public/tests:/app/public/tests
      - ./app/public/test-results:/app/public/test-results
      - ./app/public/artifacts:/app/public/artifacts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); const req = http.request({hostname: 'localhost', port: 3000, path: '/', timeout: 5000}, (res) => process.exit(res.statusCode < 400 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s # Increased to allow for migrations
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`demo.supercheck.io`)"
      - "traefik.http.routers.app.entrypoints=websecure"
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
    networks:
      - supercheck-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 1G

  # Worker (NestJS Runner)
  worker:
    image: ghcr.io/supercheck-io/supercheck/worker:1.0.4-beta
    environment:
      <<: *common-env
      # Worker-specific configuration (inherits all common env vars)
      # Memory Protection (prevents memory leaks and OOM conditions)
      NODE_OPTIONS: "--max-old-space-size=1024 --expose-gc --experimental-worker"
      # Thread Protection (optimized for I/O performance)
      UV_THREADPOOL_SIZE: 4 # Optimal for 4-core server - balances performance with resource usage
    volumes:
      - worker-playwright-reports:/app/playwright-reports
      - worker-reports:/app/report
    depends_on:
      postgres:
        condition: service_healthy
      app:
        condition: service_healthy # Wait for app to complete migrations
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const http = require('http'); const req = http.request({hostname: 'localhost', port: 3001, path: '/health', timeout: 5000}, (res) => process.exit(res.statusCode === 200 ? 0 : 1)); req.on('error', () => process.exit(1)); req.end();",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - supercheck-network
    deploy:
      replicas: 4
      # Enhanced Resource Protection (prevents resource exhaustion attacks)
      resources:
        limits:
          cpus: "1.5"
          memory: 1.5G
          pids: 512 # Prevents fork bombs and process explosion
        reservations:
          cpus: "0.5"
          memory: 512M

      # Container Restart Protection (handles stuck/crashed containers)
      restart_policy:
        condition: on-failure
        max_attempts: 3
        delay: 5s

    # System-level Resource Limits (additional protection layer)
    sysctls:
      - net.core.somaxconn=1024 # Limits network connection backlog
    ulimits:
      nproc: 65535 # Limits total processes per container
      nofile: # Limits file descriptors (prevents file exhaustion)
        soft: 65535
        hard: 65535

  # PostgreSQL Database
  postgres:
    image: postgres:16.2
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=supercheck
      # PostgreSQL Performance Tuning for 8GB server
      - POSTGRES_INITDB_ARGS=--data-checksums
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 30s
    networks:
      - supercheck-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1.5G
        reservations:
          cpus: "0.5"
          memory: 1G

  # Redis (for job queues)
  redis:
    image: redis:latest
    environment:
      - REDIS_PASSWORD=supersecure-redis-password-change-this
    command: sh -c "rm -rf /data/* && redis-server --requirepass \"supersecure-redis-password-change-this\" --maxmemory 512mb --maxmemory-policy allkeys-lru --save '' --appendonly no --protected-mode yes --bind 0.0.0.0 --tcp-keepalive 300"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-a",
          "supersecure-redis-password-change-this",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - supercheck-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - supercheck-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 512M

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
  worker-playwright-reports:
    driver: local
  worker-reports:
    driver: local
  traefik-letsencrypt:
    driver: local

networks:
  supercheck-network:
    driver: bridge
