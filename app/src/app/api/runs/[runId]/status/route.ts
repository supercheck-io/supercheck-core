import { NextResponse } from \"next/server\";\nimport { db } from \"@/db/client\";\nimport { runs, reports, ReportType } from \"@/db/schema\";\nimport { eq, and } from \"drizzle-orm\";\n\nexport async function GET(\n  request: Request, \n  { params }: { params: { runId: string } }\n) {\n  const runId = params.runId;\n\n  if (!runId) {\n    return NextResponse.json({ error: \"Run ID is required\" }, { status: 400 });\n  }\n\n  try {\n    const dbInstance = await db();\n    const runResult = await dbInstance.query.runs.findFirst({\n      where: eq(runs.id, runId),\n    });\n\n    if (!runResult) {\n      return NextResponse.json({ error: \"Run not found\" }, { status: 404 });\n    }\n\n    // Fetch report details for this run\n    const reportResult = await dbInstance.query.reports.findFirst({\n      where: and(\n        eq(reports.entityId, runId),\n        eq(reports.entityType, 'run' as ReportType)\n      ),\n      columns: {\n        s3Url: true\n      }\n    });\n\n    // Return the relevant fields including the report URL\n    return NextResponse.json({\n      runId: runResult.id,\n      jobId: runResult.jobId,\n      status: runResult.status,\n      startedAt: runResult.startedAt,\n      completedAt: runResult.completedAt,\n      duration: runResult.duration,\n      errorDetails: runResult.errorDetails,\n      // Use s3Url from reportResult if found, otherwise null\n      reportUrl: reportResult?.s3Url || null,\n    });\n\n  } catch (error) {\n    console.error(`Error fetching status for run ${runId}:`, error);\n    const errorMessage = error instanceof Error ? error.message : \"An unknown error occurred\";\n    return NextResponse.json(\n      { error: `Failed to fetch run status: ${errorMessage}` },\n      { status: 500 }\n    );\n  }\n}\n 