# Environment variables for Supercheck with External Services
# Use this configuration when using external PostgreSQL, Redis, and S3/MinIO services
# Copy this file to .env and update the values with your external service credentials

# =============================================================================
# SECURITY CONFIGURATION - REQUIRED FOR PRODUCTION
# =============================================================================

# Better Auth Secret - REQUIRED for production (generate with: openssl rand -hex 32)
BETTER_AUTH_SECRET=your-super-secret-key-change-this-in-production

# Encryption Keys - REQUIRED for production
# Generate with: openssl rand -hex 32
VARIABLES_ENCRYPTION_KEY=your-64-character-encryption-key-for-variable-secrets-change-this-in-prod
CREDENTIAL_ENCRYPTION_KEY=your-credential-encryption-key-change-this-in-production

# =============================================================================
# EXTERNAL DATABASE CONFIGURATION - REQUIRED
# =============================================================================

# External PostgreSQL Database Configuration
# Examples:
# - AWS RDS: your-db.xxxx.us-east-1.rds.amazonaws.com
# - DigitalOcean: your-db.db.ondigitalocean.com
# - Supabase: db.xxxx.supabase.co
# - Neon: ep-xxxx.us-east-2.aws.neon.tech

DB_HOST=your-postgres-host.example.com
DB_PORT=5432
DB_USER=your-db-user
DB_PASSWORD=your-db-password-change-this
DB_NAME=supercheck
DATABASE_URL=postgresql://your-db-user:your-db-password-change-this@your-postgres-host.example.com:5432/supercheck

# =============================================================================
# EXTERNAL REDIS CONFIGURATION - REQUIRED
# =============================================================================

# External Redis Configuration
# Examples:
# - Redis Cloud: redis-xxxxx.c1.us-east-1-2.ec2.cloud.redislabs.com
# - AWS ElastiCache: your-cluster.xxxx.use1.cache.amazonaws.com
# - DigitalOcean: your-redis.db.ondigitalocean.com
# - Upstash: usxx-xxxxx.upstash.io

REDIS_HOST=your-redis-host.example.com
REDIS_PORT=6379
REDIS_PASSWORD=your-redis-password-change-this
REDIS_URL=redis://:your-redis-password-change-this@your-redis-host.example.com:6379

# For TLS/SSL Redis connections (Redis Cloud, Upstash, etc.), use:
# REDIS_URL=rediss://:your-redis-password@your-redis-host.example.com:6379

# =============================================================================
# EXTERNAL S3/MINIO CONFIGURATION - REQUIRED
# =============================================================================

# External S3 or MinIO Configuration
# Examples:
# - AWS S3: s3.amazonaws.com (leave S3_ENDPOINT empty or set to https://s3.amazonaws.com)
# - DigitalOcean Spaces: nyc3.digitaloceanspaces.com
# - Cloudflare R2: https://xxxxx.r2.cloudflarestorage.com
# - MinIO: https://minio.yourdomain.com
# - Backblaze B2: s3.us-west-000.backblazeb2.com

AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-s3-access-key-id
AWS_SECRET_ACCESS_KEY=your-s3-secret-access-key

# S3 Endpoint (use full URL for non-AWS providers, or leave empty for AWS S3)
S3_ENDPOINT=https://your-s3-endpoint.example.com

# S3 Bucket Names
S3_JOB_BUCKET_NAME=playwright-job-artifacts
S3_TEST_BUCKET_NAME=playwright-test-artifacts

# S3 Configuration
S3_FORCE_PATH_STYLE=true  # Set to false for AWS S3, true for MinIO/DigitalOcean/others
S3_OPERATION_TIMEOUT=10000
S3_MAX_RETRIES=3

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# App URLs (use your production domain)
NEXT_PUBLIC_APP_URL=https://app.example.com
BETTER_AUTH_URL=https://app.example.com

# Environment and Logging
NODE_ENV=production

# Capacity and Timeout Configuration
RUNNING_CAPACITY=6
QUEUED_CAPACITY=50
TEST_EXECUTION_TIMEOUT_MS=120000
JOB_EXECUTION_TIMEOUT_MS=900000

# Notification Channel Limits
NEXT_PUBLIC_MAX_JOB_NOTIFICATION_CHANNELS=10
NEXT_PUBLIC_MAX_MONITOR_NOTIFICATION_CHANNELS=10

# =============================================================================
# PLAYWRIGHT CONFIGURATION
# =============================================================================

# Playwright Artifact Configuration
PLAYWRIGHT_HEADLESS=true
PLAYWRIGHT_RETRIES=1
PLAYWRIGHT_TRACE=on
PLAYWRIGHT_SCREENSHOT=on
PLAYWRIGHT_VIDEO=on

# Browser Support (disabled by default for performance)
ENABLE_FIREFOX=false
ENABLE_WEBKIT=false
ENABLE_MOBILE=false

# =============================================================================
# DATA LIFECYCLE MANAGEMENT (CLEANUP) CONFIGURATION
# =============================================================================

# Monitor Results Cleanup
MONITOR_CLEANUP_ENABLED=true
MONITOR_CLEANUP_CRON="0 2 * * *"
MONITOR_RETENTION_DAYS=30
MONITOR_CLEANUP_BATCH_SIZE=1000
MONITOR_PRESERVE_STATUS_CHANGES=true
MONITOR_CLEANUP_SAFETY_LIMIT=1000000

# Job Runs Cleanup
JOB_RUNS_CLEANUP_ENABLED=false
JOB_RUNS_CLEANUP_CRON="0 3 * * *"
JOB_RUNS_RETENTION_DAYS=90
JOB_RUNS_CLEANUP_BATCH_SIZE=100
JOB_RUNS_CLEANUP_SAFETY_LIMIT=10000

# Playground Artifacts Cleanup
PLAYGROUND_CLEANUP_ENABLED=true
PLAYGROUND_CLEANUP_CRON="0 */12 * * *"
PLAYGROUND_CLEANUP_MAX_AGE_HOURS=24

# =============================================================================
# EMAIL CONFIGURATION FOR NOTIFICATIONS - REQUIRED
# =============================================================================

# SMTP Configuration - Can use any SMTP provider
# Examples:
# - Resend SMTP: smtp.resend.com (user: resend)
# - Gmail: smtp.gmail.com (use App Password with 2FA)
# - SendGrid: smtp.sendgrid.net (user: apikey)
# - Amazon SES: email-smtp.region.amazonaws.com

SMTP_HOST=smtp.resend.com
SMTP_PORT=587
SMTP_USER=resend
SMTP_PASSWORD=your-smtp-password-change-this-in-production
SMTP_SECURE=false
SMTP_FROM_EMAIL=notification@example.com

# =============================================================================
# AI FIX FEATURE CONFIGURATION (OPTIONAL)
# =============================================================================

# AI Provider Configuration
AI_PROVIDER=openai

# AI Model Configuration
AI_MODEL=gpt-4o-mini

# API Keys (required if AI fix is enabled)
OPENAI_API_KEY=your-openai-api-key-here

# AI Service Configuration (Advanced)
AI_TIMEOUT_MS=90000
AI_MAX_RETRIES=2
AI_TEMPERATURE=0.1

# =============================================================================
# ADMIN CONFIGURATION - REQUIRED
# =============================================================================

# Super Admin Emails (comma-separated)
SUPER_ADMIN_EMAILS=admin@example.com

# Organization Configuration
MAX_PROJECTS_PER_ORG=10
DEFAULT_PROJECT_NAME="Default Project"

# =============================================================================
# TRAEFIK/HTTPS CONFIGURATION - REQUIRED
# =============================================================================

# Domain and SSL Configuration
APP_DOMAIN=app.example.com
ACME_EMAIL=admin@example.com

# =============================================================================
# EXTERNAL SERVICES SETUP CHECKLIST
# =============================================================================

# PostgreSQL Setup:
# 1. Create database named 'supercheck'
# 2. Ensure user has full permissions (CREATE, ALTER, DROP, SELECT, INSERT, UPDATE, DELETE)
# 3. Enable SSL/TLS for production
# 4. Configure connection pooling if available
# 5. Set appropriate resource limits (connections, memory)

# Redis Setup:
# 1. Enable password authentication (REQUIRED)
# 2. Configure maxmemory policy (recommended: allkeys-lru)
# 3. Set maxmemory limit (recommended: 512MB minimum)
# 4. Disable persistence (save '' and appendonly no) for better performance
# 5. Enable SSL/TLS for production if available

# S3/MinIO Setup:
# 1. Create two buckets: playwright-job-artifacts and playwright-test-artifacts
# 2. Configure IAM user/policy with s3:PutObject, s3:GetObject, s3:DeleteObject permissions
# 3. Enable bucket versioning (recommended)
# 4. Set appropriate lifecycle policies for old artifacts
# 5. Configure CORS if accessing artifacts from browser

# Security Best Practices:
# 1. Use strong, unique passwords for all services
# 2. Enable SSL/TLS for all database and cache connections
# 3. Use IAM roles instead of access keys where possible
# 4. Regularly rotate secrets and credentials
# 5. Configure firewall rules to restrict access to trusted IPs
# 6. Enable audit logging for all services
# 7. Set up monitoring and alerts for service health
